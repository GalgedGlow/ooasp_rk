Project: Implementing OOASP
Goal

Write an encoding (ooasp.lp) which, given a description of an OOASP configuration
model (config-model.lp), and a partial instantiation (partial-instantiation.lp), generates a complete instantiation of the model, using
the output format of the instantiation predicates in Table 2.

The command to generate the instantiations should be this simple, using the naming conventions above:

clingo config-model.lp partial-instantiation.lp ooasp.lp -0

There should be a one-to-one correspondence between the stable models generated by this command, and the complete instantiations that extend the partial instantiation. In case the partial instantiation cannot be extended to a complete one, this call to clingo should give UNSAT.

The input configuration model (config-model.lp) should use the predicates described in Table 1 to represent a configuration model. 
The partial instantiation, as well as the complete instantiation that clingo generates, should use the predicates described in Table 2. 
Your encoding should generate and instantiation and check, using
integrity constraints, that all of the constraints defined in the configuration model are satisfied
in the instantiation, giving UNSAT if not. For example, to check that the minimum cardinality of
associations are not violated, one could modify the rule in subsection 3.2. Leaving the head of the
rule would give us the integrity constraint that checks minimum cardinality of associations.

You should also define a suite of test cases for your encoding. One test case in this suite would be a pair consisting of a configuration model 
and a partial instantiation, and you should test that, given this pair of encodings as input, the complete instantiation(s) generated by your 
encoding are correct. As one test case, you can take the Modules configuration model in Listing 1, and the partial instantiation given subsection 4.2, 
and check if your encoding generates the complete instantiation in Figure 3.

Finally, expand your encoding to find the instantiation with the minimal amount of components required to satisfy the configuration model (Hint: you can use a #minimize statements to achieve this).

Your repository should include a README.md describing where your encoding is located, and the
command to generate the instantiations, in case these are not immediately clear upon viewing the repository.

F.A.Q.

    Does my encoding need to do symmetry breaking?

No, this is not a required part of the project.

    When generating the instantiation, how do I know how many object identifiers will be needed to complete the instantiation?

You may use a hard coded large value as the upper bound on the number of object identifiers.

    Can/should I instantiate an object as a non-leaf class?

Your objects should only be instantiated as leaf classes of the configuration model; non-leaf classes should be considered "abstract" (using python/java terminology).
